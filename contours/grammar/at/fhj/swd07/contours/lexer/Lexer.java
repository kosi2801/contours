/* This file was generated by SableCC (http://www.sablecc.org/). */

package at.fhj.swd07.contours.lexer;

import java.io.*;
import at.fhj.swd07.contours.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDefinitionIdentifier(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStart(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOutputPath(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEof(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TByte(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLong(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBcd(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParen(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParen(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDotdot(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBracket(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBracket(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDefinitionSeparator(line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPackageIdentifier(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCharacterLiteral(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntegerLiteral(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new THexLiteral(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new THexByte(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComment(text, line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlanks(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {35, 35, 6}, {40, 40, 7}, {41, 41, 8}, {44, 44, 9}, {46, 46, 10}, {48, 48, 11}, {49, 57, 12}, {58, 58, 13}, {59, 59, 14}, {65, 65, 15}, {66, 66, 16}, {67, 68, 15}, {69, 69, 17}, {70, 72, 15}, {73, 73, 18}, {74, 75, 15}, {76, 76, 19}, {77, 78, 15}, {79, 79, 20}, {80, 82, 15}, {83, 83, 21}, {84, 90, 15}, {91, 91, 22}, {93, 93, 23}, {97, 97, 15}, {98, 98, 24}, {99, 100, 15}, {101, 101, 25}, {102, 104, 15}, {105, 105, 26}, {106, 107, 15}, {108, 108, 27}, {109, 110, 15}, {111, 111, 28}, {112, 114, 15}, {115, 115, 29}, {116, 122, 15}, {123, 123, 30}, {125, 125, 31}, },
            {},
            {},
            {{10, 10, 32}, },
            {},
            {{32, 33, 33}, {34, 34, 34}, {35, 127, 33}, },
            {{0, 9, 35}, {11, 12, 35}, {13, 13, 36}, {14, 65535, 35}, },
            {},
            {},
            {},
            {{46, 46, 37}, },
            {{48, 57, 12}, {120, 120, 38}, },
            {{48, 57, 12}, },
            {{58, 58, 39}, },
            {},
            {{46, 46, 40}, {48, 57, 41}, {65, 90, 42}, {95, 95, 43}, {97, 122, 42}, },
            {{46, 57, -17}, {65, 66, 42}, {67, 67, 44}, {68, 88, 42}, {89, 89, 45}, {90, 90, 42}, {95, 95, 43}, {97, 98, 42}, {99, 99, 46}, {100, 120, 42}, {121, 121, 47}, {122, 122, 42}, },
            {{46, 57, -17}, {65, 78, 42}, {79, 79, 48}, {80, 90, 42}, {95, 95, 43}, {97, 110, 42}, {111, 111, 49}, {112, 122, 42}, },
            {{46, 57, -17}, {65, 67, 42}, {68, 68, 50}, {69, 77, 42}, {78, 78, 51}, {79, 90, 42}, {95, 95, 43}, {97, 99, 42}, {100, 100, 52}, {101, 109, 42}, {110, 110, 53}, {111, 122, 42}, },
            {{46, 78, -19}, {79, 79, 54}, {80, 110, -19}, {111, 111, 55}, {112, 122, 42}, },
            {{46, 57, -17}, {65, 84, 42}, {85, 85, 56}, {86, 90, 42}, {95, 95, 43}, {97, 116, 42}, {117, 117, 57}, {118, 122, 42}, },
            {{46, 57, -17}, {65, 83, 42}, {84, 84, 58}, {85, 90, 42}, {95, 95, 43}, {97, 115, 42}, {116, 116, 59}, {117, 122, 42}, },
            {},
            {},
            {{46, 122, -18}, },
            {{46, 122, -19}, },
            {{46, 122, -20}, },
            {{46, 122, -21}, },
            {{46, 122, -22}, },
            {{46, 122, -23}, },
            {},
            {},
            {},
            {{32, 33, 33}, {34, 34, 60}, {35, 127, 33}, },
            {{34, 34, 61}, },
            {{0, 65535, -8}, },
            {{10, 10, 62}, },
            {},
            {{48, 57, 63}, {65, 70, 63}, {97, 102, 63}, },
            {{61, 61, 64}, },
            {{65, 90, 65}, {97, 122, 65}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 67, -20}, {68, 68, 66}, {69, 90, 42}, {95, 99, -20}, {100, 100, 67}, {101, 122, 42}, },
            {{46, 83, -23}, {84, 84, 68}, {85, 115, -23}, {116, 116, 69}, {117, 122, 42}, },
            {{46, 122, -46}, },
            {{46, 122, -47}, },
            {{46, 57, -17}, {65, 69, 42}, {70, 70, 70}, {71, 90, 42}, {95, 95, 43}, {97, 101, 42}, {102, 102, 71}, {103, 122, 42}, },
            {{46, 122, -50}, },
            {{46, 57, -17}, {65, 68, 42}, {69, 69, 72}, {70, 90, 42}, {95, 95, 43}, {97, 100, 42}, {101, 101, 73}, {102, 122, 42}, },
            {{46, 83, -23}, {84, 84, 74}, {85, 115, -23}, {116, 116, 75}, {117, 122, 42}, },
            {{46, 122, -52}, },
            {{46, 122, -53}, },
            {{46, 57, -17}, {65, 77, 42}, {78, 78, 76}, {79, 95, -20}, {97, 109, 42}, {110, 110, 77}, {111, 122, 42}, },
            {{46, 122, -56}, },
            {{46, 83, -23}, {84, 84, 78}, {85, 115, -23}, {116, 116, 79}, {117, 122, 42}, },
            {{46, 122, -58}, },
            {{46, 57, -17}, {65, 65, 80}, {66, 90, 42}, {95, 95, 43}, {97, 97, 81}, {98, 122, 42}, },
            {{46, 122, -60}, },
            {{34, 34, 61}, },
            {{32, 127, -35}, },
            {},
            {{48, 57, 82}, {65, 70, 82}, {97, 102, 82}, },
            {},
            {{46, 46, 40}, {48, 57, 83}, {65, 90, 84}, {95, 95, 85}, {97, 122, 84}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 68, -52}, {69, 69, 86}, {70, 100, -52}, {101, 101, 87}, {102, 122, 42}, },
            {{46, 122, -70}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 77, -56}, {78, 78, 88}, {79, 109, -56}, {110, 110, 89}, {111, 122, 42}, },
            {{46, 122, -74}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 57, -17}, {65, 70, 42}, {71, 71, 90}, {72, 90, 42}, {95, 95, 43}, {97, 102, 42}, {103, 103, 91}, {104, 122, 42}, },
            {{46, 122, -78}, },
            {{46, 57, -17}, {65, 79, 42}, {80, 80, 92}, {81, 90, 42}, {95, 95, 43}, {97, 111, 42}, {112, 112, 93}, {113, 122, 42}, },
            {{46, 122, -80}, },
            {{46, 57, -17}, {65, 81, 42}, {82, 82, 94}, {83, 90, 42}, {95, 95, 43}, {97, 113, 42}, {114, 114, 95}, {115, 122, 42}, },
            {{46, 122, -82}, },
            {{48, 57, 96}, {65, 70, 96}, {97, 102, 96}, },
            {{46, 122, -67}, },
            {{46, 122, -67}, },
            {{46, 122, -67}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 83, -23}, {84, 84, 97}, {85, 115, -23}, {116, 116, 98}, {117, 122, 42}, },
            {{46, 122, -90}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 84, -22}, {85, 85, 99}, {86, 116, -22}, {117, 117, 100}, {118, 122, 42}, },
            {{46, 122, -94}, },
            {{46, 83, -23}, {84, 84, 101}, {85, 115, -23}, {116, 116, 102}, {117, 122, 42}, },
            {{46, 122, -96}, },
            {{48, 102, -84}, },
            {{46, 57, -17}, {65, 72, 42}, {73, 73, 103}, {74, 90, 42}, {95, 95, 43}, {97, 104, 42}, {105, 105, 104}, {106, 122, 42}, },
            {{46, 122, -99}, },
            {{46, 83, -23}, {84, 84, 105}, {85, 115, -23}, {116, 116, 106}, {117, 122, 42}, },
            {{46, 122, -101}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 69, -50}, {70, 70, 107}, {71, 101, -50}, {102, 102, 108}, {103, 122, 42}, },
            {{46, 122, -105}, },
            {{46, 90, -17}, {95, 95, 109}, {97, 122, 42}, },
            {{46, 122, -107}, },
            {{46, 72, -99}, {73, 73, 110}, {74, 104, -99}, {105, 105, 111}, {106, 122, 42}, },
            {{46, 122, -109}, },
            {{46, 79, -80}, {80, 80, 112}, {81, 111, -80}, {112, 112, 113}, {113, 122, 42}, },
            {{46, 68, -52}, {69, 69, 114}, {70, 100, -52}, {101, 101, 115}, {102, 122, 42}, },
            {{46, 122, -112}, },
            {{46, 57, -17}, {65, 65, 116}, {66, 95, -60}, {97, 97, 117}, {98, 122, 42}, },
            {{46, 122, -114}, },
            {{46, 81, -82}, {82, 82, 118}, {83, 113, -82}, {114, 114, 119}, {115, 122, 42}, },
            {{46, 122, -116}, },
            {{46, 83, -23}, {84, 84, 120}, {85, 115, -23}, {116, 116, 121}, {117, 122, 42}, },
            {{46, 122, -118}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
            {{46, 57, -17}, {65, 71, 42}, {72, 72, 122}, {73, 90, 42}, {95, 95, 43}, {97, 103, 42}, {104, 104, 123}, {105, 122, 42}, },
            {{46, 122, -122}, },
            {{46, 122, -17}, },
            {{46, 122, -17}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 27, 27, 27, 27, -1, -1, 11, 12, 9, 8, 23, 23, 10, 18, 20, 20, 20, 20, 20, 20, 20, 16, 17, 20, 20, 20, 20, 20, 20, 13, 14, 27, -1, -1, -1, 26, 15, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, -1, 26, 24, 19, 21, 7, 7, 20, 20, 3, 3, 20, 20, 5, 5, 20, 20, 20, 20, 20, 20, 24, 21, 21, 21, 4, 4, 20, 20, 6, 6, 20, 20, 20, 20, 24, 20, 20, 20, 20, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 20, 20, 2, 2, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
