/* This file was generated by SableCC (http://www.sablecc.org/). */

package at.fhj.swd07.contours.node;

import at.fhj.swd07.contours.analysis.*;

@SuppressWarnings("nls")
public final class AMultiplierComponentElementMultiplierOrContextName extends PComponentElementMultiplierOrContextName
{
    private PComponentElementMultiplier _componentElementMultiplier_;

    public AMultiplierComponentElementMultiplierOrContextName()
    {
        // Constructor
    }

    public AMultiplierComponentElementMultiplierOrContextName(
        @SuppressWarnings("hiding") PComponentElementMultiplier _componentElementMultiplier_)
    {
        // Constructor
        setComponentElementMultiplier(_componentElementMultiplier_);

    }

    @Override
    public Object clone()
    {
        return new AMultiplierComponentElementMultiplierOrContextName(
            cloneNode(this._componentElementMultiplier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiplierComponentElementMultiplierOrContextName(this);
    }

    public PComponentElementMultiplier getComponentElementMultiplier()
    {
        return this._componentElementMultiplier_;
    }

    public void setComponentElementMultiplier(PComponentElementMultiplier node)
    {
        if(this._componentElementMultiplier_ != null)
        {
            this._componentElementMultiplier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._componentElementMultiplier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._componentElementMultiplier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._componentElementMultiplier_ == child)
        {
            this._componentElementMultiplier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._componentElementMultiplier_ == oldChild)
        {
            setComponentElementMultiplier((PComponentElementMultiplier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
