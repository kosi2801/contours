/* This file was generated by SableCC (http://www.sablecc.org/). */

package at.fhj.swd07.contours.analysis;

import java.util.*;
import at.fhj.swd07.contours.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPFormatDefinition().apply(this);
        outStart(node);
    }

    public void inAFormatDefinition(AFormatDefinition node)
    {
        defaultIn(node);
    }

    public void outAFormatDefinition(AFormatDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormatDefinition(AFormatDefinition node)
    {
        inAFormatDefinition(node);
        if(node.getComponentDefinitions() != null)
        {
            node.getComponentDefinitions().apply(this);
        }
        if(node.getFormatHeader() != null)
        {
            node.getFormatHeader().apply(this);
        }
        outAFormatDefinition(node);
    }

    public void inAFormatHeader(AFormatHeader node)
    {
        defaultIn(node);
    }

    public void outAFormatHeader(AFormatHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormatHeader(AFormatHeader node)
    {
        inAFormatHeader(node);
        if(node.getStartComponent() != null)
        {
            node.getStartComponent().apply(this);
        }
        if(node.getOutputPath() != null)
        {
            node.getOutputPath().apply(this);
        }
        if(node.getDefinitionPackageIdentifier() != null)
        {
            node.getDefinitionPackageIdentifier().apply(this);
        }
        outAFormatHeader(node);
    }

    public void inADefinitionPackageIdentifier(ADefinitionPackageIdentifier node)
    {
        defaultIn(node);
    }

    public void outADefinitionPackageIdentifier(ADefinitionPackageIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionPackageIdentifier(ADefinitionPackageIdentifier node)
    {
        inADefinitionPackageIdentifier(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getPackageIdentifier() != null)
        {
            node.getPackageIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getDefinitionIdentifier() != null)
        {
            node.getDefinitionIdentifier().apply(this);
        }
        outADefinitionPackageIdentifier(node);
    }

    public void inAOutputPath(AOutputPath node)
    {
        defaultIn(node);
    }

    public void outAOutputPath(AOutputPath node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutputPath(AOutputPath node)
    {
        inAOutputPath(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getOutputPath() != null)
        {
            node.getOutputPath().apply(this);
        }
        outAOutputPath(node);
    }

    public void inAStartComponent(AStartComponent node)
    {
        defaultIn(node);
    }

    public void outAStartComponent(AStartComponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartComponent(AStartComponent node)
    {
        inAStartComponent(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        outAStartComponent(node);
    }

    public void inAComponentDefinitions(AComponentDefinitions node)
    {
        defaultIn(node);
    }

    public void outAComponentDefinitions(AComponentDefinitions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentDefinitions(AComponentDefinitions node)
    {
        inAComponentDefinitions(node);
        {
            List<PComponentDefinition> copy = new ArrayList<PComponentDefinition>(node.getComponentDefinition());
            Collections.reverse(copy);
            for(PComponentDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outAComponentDefinitions(node);
    }

    public void inAIdComponentDefinition(AIdComponentDefinition node)
    {
        defaultIn(node);
    }

    public void outAIdComponentDefinition(AIdComponentDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdComponentDefinition(AIdComponentDefinition node)
    {
        inAIdComponentDefinition(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getComponentDefinitionList() != null)
        {
            node.getComponentDefinitionList().apply(this);
        }
        if(node.getDefinitionSeparator() != null)
        {
            node.getDefinitionSeparator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdComponentDefinition(node);
    }

    public void inAComponentDefinitionElementComponentDefinitionList(AComponentDefinitionElementComponentDefinitionList node)
    {
        defaultIn(node);
    }

    public void outAComponentDefinitionElementComponentDefinitionList(AComponentDefinitionElementComponentDefinitionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentDefinitionElementComponentDefinitionList(AComponentDefinitionElementComponentDefinitionList node)
    {
        inAComponentDefinitionElementComponentDefinitionList(node);
        if(node.getComponentDefinitionElement() != null)
        {
            node.getComponentDefinitionElement().apply(this);
        }
        outAComponentDefinitionElementComponentDefinitionList(node);
    }

    public void inAComponentDefinitionListComponentDefinitionList(AComponentDefinitionListComponentDefinitionList node)
    {
        defaultIn(node);
    }

    public void outAComponentDefinitionListComponentDefinitionList(AComponentDefinitionListComponentDefinitionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentDefinitionListComponentDefinitionList(AComponentDefinitionListComponentDefinitionList node)
    {
        inAComponentDefinitionListComponentDefinitionList(node);
        if(node.getComponentDefinitionElement() != null)
        {
            node.getComponentDefinitionElement().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getComponentDefinitionList() != null)
        {
            node.getComponentDefinitionList().apply(this);
        }
        outAComponentDefinitionListComponentDefinitionList(node);
    }

    public void inAComponentComponentDefinitionElement(AComponentComponentDefinitionElement node)
    {
        defaultIn(node);
    }

    public void outAComponentComponentDefinitionElement(AComponentComponentDefinitionElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentComponentDefinitionElement(AComponentComponentDefinitionElement node)
    {
        inAComponentComponentDefinitionElement(node);
        if(node.getComponentElementName() != null)
        {
            node.getComponentElementName().apply(this);
        }
        if(node.getComponentElementMultiplierOrContextName() != null)
        {
            node.getComponentElementMultiplierOrContextName().apply(this);
        }
        if(node.getComponentElementType() != null)
        {
            node.getComponentElementType().apply(this);
        }
        outAComponentComponentDefinitionElement(node);
    }

    public void inAEofComponentDefinitionElement(AEofComponentDefinitionElement node)
    {
        defaultIn(node);
    }

    public void outAEofComponentDefinitionElement(AEofComponentDefinitionElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEofComponentDefinitionElement(AEofComponentDefinitionElement node)
    {
        inAEofComponentDefinitionElement(node);
        if(node.getEof() != null)
        {
            node.getEof().apply(this);
        }
        outAEofComponentDefinitionElement(node);
    }

    public void inAMultiplierComponentElementMultiplierOrContextName(AMultiplierComponentElementMultiplierOrContextName node)
    {
        defaultIn(node);
    }

    public void outAMultiplierComponentElementMultiplierOrContextName(AMultiplierComponentElementMultiplierOrContextName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplierComponentElementMultiplierOrContextName(AMultiplierComponentElementMultiplierOrContextName node)
    {
        inAMultiplierComponentElementMultiplierOrContextName(node);
        if(node.getComponentElementMultiplier() != null)
        {
            node.getComponentElementMultiplier().apply(this);
        }
        outAMultiplierComponentElementMultiplierOrContextName(node);
    }

    public void inAContextNameComponentElementMultiplierOrContextName(AContextNameComponentElementMultiplierOrContextName node)
    {
        defaultIn(node);
    }

    public void outAContextNameComponentElementMultiplierOrContextName(AContextNameComponentElementMultiplierOrContextName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContextNameComponentElementMultiplierOrContextName(AContextNameComponentElementMultiplierOrContextName node)
    {
        inAContextNameComponentElementMultiplierOrContextName(node);
        if(node.getComponentElementContextName() != null)
        {
            node.getComponentElementContextName().apply(this);
        }
        outAContextNameComponentElementMultiplierOrContextName(node);
    }

    public void inAStaticTextComponentElementType(AStaticTextComponentElementType node)
    {
        defaultIn(node);
    }

    public void outAStaticTextComponentElementType(AStaticTextComponentElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticTextComponentElementType(AStaticTextComponentElementType node)
    {
        inAStaticTextComponentElementType(node);
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        outAStaticTextComponentElementType(node);
    }

    public void inAStaticHexComponentElementType(AStaticHexComponentElementType node)
    {
        defaultIn(node);
    }

    public void outAStaticHexComponentElementType(AStaticHexComponentElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticHexComponentElementType(AStaticHexComponentElementType node)
    {
        inAStaticHexComponentElementType(node);
        if(node.getHexLiteral() != null)
        {
            node.getHexLiteral().apply(this);
        }
        outAStaticHexComponentElementType(node);
    }

    public void inATypeComponentElementType(ATypeComponentElementType node)
    {
        defaultIn(node);
    }

    public void outATypeComponentElementType(ATypeComponentElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeComponentElementType(ATypeComponentElementType node)
    {
        inATypeComponentElementType(node);
        if(node.getElementType() != null)
        {
            node.getElementType().apply(this);
        }
        outATypeComponentElementType(node);
    }

    public void inAComponentComponentElementType(AComponentComponentElementType node)
    {
        defaultIn(node);
    }

    public void outAComponentComponentElementType(AComponentComponentElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentComponentElementType(AComponentComponentElementType node)
    {
        inAComponentComponentElementType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAComponentComponentElementType(node);
    }

    public void inAByteElementType(AByteElementType node)
    {
        defaultIn(node);
    }

    public void outAByteElementType(AByteElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteElementType(AByteElementType node)
    {
        inAByteElementType(node);
        if(node.getByte() != null)
        {
            node.getByte().apply(this);
        }
        outAByteElementType(node);
    }

    public void inAIntegerElementType(AIntegerElementType node)
    {
        defaultIn(node);
    }

    public void outAIntegerElementType(AIntegerElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerElementType(AIntegerElementType node)
    {
        inAIntegerElementType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerElementType(node);
    }

    public void inALongElementType(ALongElementType node)
    {
        defaultIn(node);
    }

    public void outALongElementType(ALongElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongElementType(ALongElementType node)
    {
        inALongElementType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongElementType(node);
    }

    public void inABcdElementType(ABcdElementType node)
    {
        defaultIn(node);
    }

    public void outABcdElementType(ABcdElementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABcdElementType(ABcdElementType node)
    {
        inABcdElementType(node);
        if(node.getBcd() != null)
        {
            node.getBcd().apply(this);
        }
        outABcdElementType(node);
    }

    public void inAStaticMultiplierComponentElementMultiplier(AStaticMultiplierComponentElementMultiplier node)
    {
        defaultIn(node);
    }

    public void outAStaticMultiplierComponentElementMultiplier(AStaticMultiplierComponentElementMultiplier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticMultiplierComponentElementMultiplier(AStaticMultiplierComponentElementMultiplier node)
    {
        inAStaticMultiplierComponentElementMultiplier(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAStaticMultiplierComponentElementMultiplier(node);
    }

    public void inAContextMultiplierComponentElementMultiplier(AContextMultiplierComponentElementMultiplier node)
    {
        defaultIn(node);
    }

    public void outAContextMultiplierComponentElementMultiplier(AContextMultiplierComponentElementMultiplier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContextMultiplierComponentElementMultiplier(AContextMultiplierComponentElementMultiplier node)
    {
        inAContextMultiplierComponentElementMultiplier(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAContextMultiplierComponentElementMultiplier(node);
    }

    public void inAComponentElementName(AComponentElementName node)
    {
        defaultIn(node);
    }

    public void outAComponentElementName(AComponentElementName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentElementName(AComponentElementName node)
    {
        inAComponentElementName(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outAComponentElementName(node);
    }

    public void inAComponentElementContextName(AComponentElementContextName node)
    {
        defaultIn(node);
    }

    public void outAComponentElementContextName(AComponentElementContextName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComponentElementContextName(AComponentElementContextName node)
    {
        inAComponentElementContextName(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAComponentElementContextName(node);
    }
}
