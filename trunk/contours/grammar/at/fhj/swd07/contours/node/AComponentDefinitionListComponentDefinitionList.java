/* This file was generated by SableCC (http://www.sablecc.org/). */

package at.fhj.swd07.contours.node;

import at.fhj.swd07.contours.analysis.*;

@SuppressWarnings("nls")
public final class AComponentDefinitionListComponentDefinitionList extends PComponentDefinitionList
{
    private PComponentDefinitionList _componentDefinitionList_;
    private TComma _comma_;
    private PComponentDefinitionElement _componentDefinitionElement_;

    public AComponentDefinitionListComponentDefinitionList()
    {
        // Constructor
    }

    public AComponentDefinitionListComponentDefinitionList(
        @SuppressWarnings("hiding") PComponentDefinitionList _componentDefinitionList_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PComponentDefinitionElement _componentDefinitionElement_)
    {
        // Constructor
        setComponentDefinitionList(_componentDefinitionList_);

        setComma(_comma_);

        setComponentDefinitionElement(_componentDefinitionElement_);

    }

    @Override
    public Object clone()
    {
        return new AComponentDefinitionListComponentDefinitionList(
            cloneNode(this._componentDefinitionList_),
            cloneNode(this._comma_),
            cloneNode(this._componentDefinitionElement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComponentDefinitionListComponentDefinitionList(this);
    }

    public PComponentDefinitionList getComponentDefinitionList()
    {
        return this._componentDefinitionList_;
    }

    public void setComponentDefinitionList(PComponentDefinitionList node)
    {
        if(this._componentDefinitionList_ != null)
        {
            this._componentDefinitionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._componentDefinitionList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PComponentDefinitionElement getComponentDefinitionElement()
    {
        return this._componentDefinitionElement_;
    }

    public void setComponentDefinitionElement(PComponentDefinitionElement node)
    {
        if(this._componentDefinitionElement_ != null)
        {
            this._componentDefinitionElement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._componentDefinitionElement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._componentDefinitionList_)
            + toString(this._comma_)
            + toString(this._componentDefinitionElement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._componentDefinitionList_ == child)
        {
            this._componentDefinitionList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._componentDefinitionElement_ == child)
        {
            this._componentDefinitionElement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._componentDefinitionList_ == oldChild)
        {
            setComponentDefinitionList((PComponentDefinitionList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._componentDefinitionElement_ == oldChild)
        {
            setComponentDefinitionElement((PComponentDefinitionElement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
