/* This file was generated by SableCC (http://www.sablecc.org/). */

package at.fhj.swd07.contours.node;

import at.fhj.swd07.contours.analysis.*;

@SuppressWarnings("nls")
public final class AComponentComponentDefinitionElement extends PComponentDefinitionElement
{
    private PComponentElementType _componentElementType_;
    private PComponentElementMultiplierOrContextName _componentElementMultiplierOrContextName_;
    private PComponentElementName _componentElementName_;

    public AComponentComponentDefinitionElement()
    {
        // Constructor
    }

    public AComponentComponentDefinitionElement(
        @SuppressWarnings("hiding") PComponentElementType _componentElementType_,
        @SuppressWarnings("hiding") PComponentElementMultiplierOrContextName _componentElementMultiplierOrContextName_,
        @SuppressWarnings("hiding") PComponentElementName _componentElementName_)
    {
        // Constructor
        setComponentElementType(_componentElementType_);

        setComponentElementMultiplierOrContextName(_componentElementMultiplierOrContextName_);

        setComponentElementName(_componentElementName_);

    }

    @Override
    public Object clone()
    {
        return new AComponentComponentDefinitionElement(
            cloneNode(this._componentElementType_),
            cloneNode(this._componentElementMultiplierOrContextName_),
            cloneNode(this._componentElementName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComponentComponentDefinitionElement(this);
    }

    public PComponentElementType getComponentElementType()
    {
        return this._componentElementType_;
    }

    public void setComponentElementType(PComponentElementType node)
    {
        if(this._componentElementType_ != null)
        {
            this._componentElementType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._componentElementType_ = node;
    }

    public PComponentElementMultiplierOrContextName getComponentElementMultiplierOrContextName()
    {
        return this._componentElementMultiplierOrContextName_;
    }

    public void setComponentElementMultiplierOrContextName(PComponentElementMultiplierOrContextName node)
    {
        if(this._componentElementMultiplierOrContextName_ != null)
        {
            this._componentElementMultiplierOrContextName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._componentElementMultiplierOrContextName_ = node;
    }

    public PComponentElementName getComponentElementName()
    {
        return this._componentElementName_;
    }

    public void setComponentElementName(PComponentElementName node)
    {
        if(this._componentElementName_ != null)
        {
            this._componentElementName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._componentElementName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._componentElementType_)
            + toString(this._componentElementMultiplierOrContextName_)
            + toString(this._componentElementName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._componentElementType_ == child)
        {
            this._componentElementType_ = null;
            return;
        }

        if(this._componentElementMultiplierOrContextName_ == child)
        {
            this._componentElementMultiplierOrContextName_ = null;
            return;
        }

        if(this._componentElementName_ == child)
        {
            this._componentElementName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._componentElementType_ == oldChild)
        {
            setComponentElementType((PComponentElementType) newChild);
            return;
        }

        if(this._componentElementMultiplierOrContextName_ == oldChild)
        {
            setComponentElementMultiplierOrContextName((PComponentElementMultiplierOrContextName) newChild);
            return;
        }

        if(this._componentElementName_ == oldChild)
        {
            setComponentElementName((PComponentElementName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
